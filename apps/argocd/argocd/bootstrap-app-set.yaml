---
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: bootstrap
  namespace: argocd
spec:
  generators:
    - git:
        repoURL: https://github.com/matjahs/omni-cluster-1.git
        revision: main
        files:
          - path: "apps/*/*/metadata.yaml"
  syncPolicy:
    preserveResourcesOnDeletion: true
  template:
    metadata:
      name: '{{ name }}'
      namespace: argocd
      annotations:
        argocd.argoproj.io/sync-wave: "{{ syncWave }}"
    spec:
      project: default
      source:
        repoURL: https://github.com/matjahs/omni-cluster-1.git
        targetRevision: main
        path: '{{ appPath }}'
      destination:
        server: https://kubernetes.default.svc
        namespace: '{{ namespace }}'
      syncPolicy:
        automated:
          prune: false
        syncOptions:
          - CreateNamespace=true
          - ServerSideApply=true
          - RespectIgnoreDifferences=true
          - SkipDryRunOnMissingResource=true
        retry:
          limit: 3
          backoff:
            duration: 30s
            factor: 2
            maxDuration: 5m
      # We can use ignoreDifferences to ignore fields that are expected to change.
      # This is useful for ArgoCD apps that get updated by controllers/operators.
      ignoreDifferences:
        # ArgoCD tracking-id annotations - automatically added by ArgoCD
        - group: '*'
          kind: '*'
          namespace: '*'
          jsonPointers:
            - /metadata/annotations/argocd.argoproj.io~1tracking-id
        # ExternalSecret - ignore status updates from ESO controller
        - group: external-secrets.io
          kind: ExternalSecret
          jsonPointers:
            - /status
        - group: external-secrets.io
          kind: SecretStore
          jsonPointers:
            - /status
        - group: external-secrets.io
          kind: ClusterSecretStore
          jsonPointers:
            - /status
        # External Secrets CRDs & webhook CA bundle - dynamic status/certs
        - group: apiextensions.k8s.io
          kind: CustomResourceDefinition
          name: externalsecrets.external-secrets.io
          jsonPointers: [/status]
        - group: apiextensions.k8s.io
          kind: CustomResourceDefinition
          name: secretstores.external-secrets.io
          jsonPointers: [/status]
        - group: apiextensions.k8s.io
          kind: CustomResourceDefinition
          name: clustersecretstores.external-secrets.io
          jsonPointers: [/status]
        - kind: MutatingWebhookConfiguration
          name: external-secrets-webhook
          jsonPointers: [/webhooks/0/clientConfig/caBundle]
        - kind: ValidatingWebhookConfiguration
          name: external-secrets-webhook
          jsonPointers: [/webhooks/0/clientConfig/caBundle]
        - kind: Secret
          name: external-secrets-webhook-cert
          jsonPointers:
            - /data/ca.crt
            - /data/tls.crt
            - /data/tls.key
        # Cilium generated certs - these are dynamically generated
        - name: cilium-ca
          kind: Secret
          namespace: kube-system
          jsonPointers: [/data/ca.crt, /data/ca.key]
        - name: hubble-server-certs
          kind: Secret
          namespace: kube-system
          jsonPointers: [/data/ca.crt, /data/tls.crt, /data/tls.key]
        - name: hubble-relay-client-certs
          kind: Secret
          namespace: kube-system
          jsonPointers:
            - /data/ca.crt
            - /data/tls.crt
            - /data/tls.key
        # Cilium ConfigMap - ignore runtime modifications
        - kind: ConfigMap
          name: cilium-config
          namespace: kube-system
          jqPathExpressions:
            - .data
        # Cilium DaemonSet - ignore status
        - kind: DaemonSet
          name: cilium
          namespace: kube-system
          jsonPointers:
            - /status
        # Cilium Deployment - ignore status and runtime fields
        - kind: Deployment
          name: cilium-operator
          namespace: kube-system
          jsonPointers: [/status]
        # Service LoadBalancer - ignore ipMode field (K8s 1.30+ feature)
        - kind: Service
          jsonPointers:
            - /status/loadBalancer/ingress
        # AppArmor profile - ignore runtime apparmor fields for all workloads
        - kind: DaemonSet
          jqPathExpressions:
            - .spec.template.spec.securityContext.appArmorProfile
            - .spec.template.spec.containers[]?.securityContext.appArmorProfile
            - .spec.template.spec.initContainers[]?.securityContext.appArmorProfile
        - kind: Deployment
          jqPathExpressions:
            - .spec.template.spec.securityContext.appArmorProfile
            - .spec.template.spec.containers[]?.securityContext.appArmorProfile
            - .spec.template.spec.initContainers[]?.securityContext.appArmorProfile
        - kind: StatefulSet
          jqPathExpressions:
            - .spec.template.spec.securityContext.appArmorProfile
            - .spec.template.spec.containers[]?.securityContext.appArmorProfile
            - .spec.template.spec.initContainers[]?.securityContext.appArmorProfile
